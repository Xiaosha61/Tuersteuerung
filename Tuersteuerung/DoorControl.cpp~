/*
 * Praktikum MRT2 
 * ART3 Türsteuerung
 * Institut für Automatisierungstechnik
 * letztes Update Mai 2017
 * Autor: M.Herhold
 */

#include "DoorInterface.h"
#include "DoorControl.h"




DoorControl::DoorControl() : door_if(false, true)
{
	door_if.SecondLevelInit();
}

DoorControl::~DoorControl()
{
	door_if.quit_doorcontrol_flag = true;
}


void DoorControl::Read_S1_S2_Signal()
{
	door_if.DIO_Read(&inputSignal);
	if ((inputSignal&1)==0)
	{
		S1 = 1;
	}else{
		S1 = 0;
	}
	if ((inputSignal&2)==0)
	{
		S2 = 1;
	}else{
		S2 = 0;
	}
	if ((inputSignal&4)==0)
	{
		E1 = 1;
	}else{
		E1 = 0;
	}
	if ((inputSignal&8)==0)
	{
		E2 = 1;
	}else{
		E2 = 0;
	}
	if ((inputSignal&16)==0)
	{
		X1 = 1;
	}else{
		X1 = 0;
	}
	if ((inputSignal&32)==0)
	{
		X2 = 1;
	}else{
		X2 = 0;
	}
	if ((inputSignal&64)==0)
	{
		X3 = 1;
	}else{
		X3 = 0;
	}
	if ((inputSignal&128)==0)
	{
		LS1 = 1;
	}else{
		LS1 = 0;
	}
	if ((inputSignal&256)==0)
	{
		LS2 = 1;
	}else{
		LS2 = 0;
	}
	if ((inputSignal&512)==0)
	{
		BE = 1;
	}else{
		BE = 0;
	}
	if ((inputSignal&1024)==0)
	{
		B = 1;
	}else{
		B = 0;
	}
}

void DoorControl::set_S1_S2_Signal()
{
	//通过逻辑运算实现二进制加法
	//S1 : Low , S2 : high
	mode = (S1^S2) + ((S1&S2)<<1);
}

int DoorControl::get_S1_S2_Signal()
{
	return mode;
}


// 改变自动机的工作模式(Wechsel von verschiedenen Betrieben)
void DoorControl::ModeSwitch()
{
	set_S1_S2_Signal();

	switch(mode)
	{
		case 3:
			AutomatikMode();
			break;
		case 1:
			HandMode();
			break;
		case 2:
			ReparaturMode();
			break;
		case 0:
			ProzessAusMode();
			break;
		default :
			Fehler();
			break;
	}
}


void DoorControl::AutomatikMode()
{
	while(!TuerCloseBeurteilen())
	{
		CloseDoor();
	}
	//下面写让门开的程序
	while(!IfThereIsSth())
	{
		if(IfThereIsSth())
		{
			break;
		}

	}
	OpenDoorAndWait();
}

void DoorControl::OpenDoorAndWait()
{
	OpenDoor();
	if (X1==1)
	{
		door_if.DIO_Write(0);
		for(int i=0;i<25;i++){
			door_if.StartTimer(0.2);
		}
	}
	CloseDoorWithCondition();
}

int DoorControl::TuerCloseBeurteilen()
{
	if ((X2==1)&&(X3==1))
	{
		return 1; // 门是关着的
	}else{
		return 0; // 门是开着的
	}
}
void DoorControl::CloseDoorWithCondition()
{
	if(IfThereIsSth())
	{
		OpenDoorAndWait();
	}else{
		CloseDoor();
		if ((X2==1)||(X3==1))
		{
			door_if.DIO_Write(0);
		}
	}
}

int DoorControl::IfThereIsSth()
{
	if(((LS1)||(LS2)||(BE)||(B))==1)
	{
		return 1;
	}else{
		return 0;
	}
}


void DoorControl::HandMode()
{

}

void DoorControl::ReparaturMode()
{

}

void DoorControl::ProzessAusMode()
{

}

void DoorControl::Fehler()
{

}


void DoorControl::CloseDoor()
{

	door_if.DIO_Write(6);
}

void DoorControl::OpenDoor()
{
	door_if.DIO_Write(1);
}


void DoorControl::run()
{
	CloseDoor();
    while(1){
		//door_if.StartTimer(0.2);
		 // channels -> inputSignal
    	Read_S1_S2_Signal();
    	AutomatikMode();
	if(door_if.quit_doorcontrol_flag){
		return;
		}
	}
}




/* If "show_ui" of class DoorInterface is active use "External Tools" -> run in xterm"
 * to execute from Eclipse IDE */
int main (int argc, char *argv[])
{

	// ... insert your class initialisation and loop code here ...
	// example start:
	DoorControl control;

	control.run();

	
	return 0;
}

